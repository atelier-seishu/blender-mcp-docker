import os
import glob
import logging
from pathlib import Path
import shutil

from scripts.tripo_wrapper import run_tripo_sr  # TripoSR実行ラッパー
from blender_rpc import call_blender_mcp        # BlenderMCP RPC呼び出し

# ディレクトリ構成
INPUT_DIR = "data/input"
OUTPUT_DIR = "data/output"
TMP_DIR = "data/tmp"

# ログ設定
logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')

def generate_mesh(input_image_path, output_mesh_path):
    logging.info(f"Generating mesh from image: {input_image_path}")
    os.makedirs(os.path.dirname(output_mesh_path), exist_ok=True)

    mesh_path = run_tripo_sr(input_image_path, os.path.dirname(output_mesh_path))
    if not mesh_path or not os.path.exists(mesh_path):
        raise FileNotFoundError(f"Mesh was not generated by TripoSR: {mesh_path}")

    if mesh_path != output_mesh_path:
        shutil.move(mesh_path, output_mesh_path)

    logging.info(f"Mesh saved to: {output_mesh_path}")

def run_blender_mcp(input_mesh_path, output_dir):
    logging.info(f"Running BlenderMCP on: {input_mesh_path}")
    try:
        call_blender_mcp(input_mesh_path, output_dir)  # RPC 経由でBlenderに指示
        logging.info("BlenderMCP execution completed successfully")
    except Exception as e:
        logging.error("BlenderMCP execution failed")
        logging.error(str(e))
        raise RuntimeError("BlenderMCP execution error")

def process_all_images():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    os.makedirs(TMP_DIR, exist_ok=True)

    input_images = glob.glob(os.path.join(INPUT_DIR, "*.png")) + glob.glob(os.path.join(INPUT_DIR, "*.jpg"))
    if not input_images:
        logging.warning("No input images found.")
        return

    for image_path in input_images:
        stem = Path(image_path).stem
        temp_output_mesh = os.path.join(TMP_DIR, f"{stem}_mesh.obj")

        try:
            generate_mesh(image_path, temp_output_mesh)
            run_blender_mcp(temp_output_mesh, OUTPUT_DIR)
        except Exception as e:
            logging.error(f"Error processing {image_path}: {str(e)}")
        finally:
            if os.path.exists(temp_output_mesh):
                os.remove(temp_output_mesh)

if __name__ == "__main__":
    process_all_images()
