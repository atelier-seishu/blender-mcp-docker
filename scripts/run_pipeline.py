import os
import glob
import subprocess
from pathlib import Path
import shutil
import logging
import threading

from scripts.tripo_wrapper import run_tripo_sr
from scripts.blender_rpc import call_blender_mcp
from scripts.blender_rpc_server import app
import uvicorn

# --- ディレクトリ構成 ---
INPUT_DIR = "data/input"
OUTPUT_DIR = "data/output"
TMP_DIR = "data/tmp"

# --- ログ設定 ---
logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')

# --- FastAPI サーバー起動 ---
def start_fastapi_server():
    def run_server():
        logging.info("[INFO] Starting FastAPI server on port 9876")
        uvicorn.run(app, host="0.0.0.0", port=9876)

    threading.Thread(target=run_server, daemon=True).start()

# --- TripoSRメッシュ生成 ---
def generate_mesh(input_image_path, output_mesh_path):
    logging.info(f"[INFO] Generating mesh from image: {input_image_path}")
    os.makedirs(os.path.dirname(output_mesh_path), exist_ok=True)

    mesh_path = run_tripo_sr(input_image_path, os.path.dirname(output_mesh_path))
    if not mesh_path or not os.path.exists(mesh_path):
        raise FileNotFoundError(f"[ERROR] Mesh was not generated by TripoSR: {mesh_path}")

    if mesh_path != output_mesh_path:
        shutil.move(mesh_path, output_mesh_path)

    logging.info(f"[INFO] Mesh saved to: {output_mesh_path}")

# --- 全画像処理ループ ---
def process_all_images():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    os.makedirs(TMP_DIR, exist_ok=True)

    input_images = glob.glob(os.path.join(INPUT_DIR, "*.png")) + glob.glob(os.path.join(INPUT_DIR, "*.jpg"))
    if not input_images:
        logging.warning("[WARN] No input images found.")
        return

    for image_path in input_images:
        stem = Path(image_path).stem
        temp_output_mesh = os.path.join(TMP_DIR, f"{stem}_mesh.obj")

        try:
            generate_mesh(image_path, temp_output_mesh)
            call_blender_mcp(temp_output_mesh, OUTPUT_DIR)
        except Exception as e:
            logging.error(f"[ERROR] Error processing {image_path}: {str(e)}")
        finally:
            if os.path.exists(temp_output_mesh):
                os.remove(temp_output_mesh)

# --- 実行 ---
if __name__ == "__main__":
    start_fastapi_server()
    process_all_images()
